name: 🚀 Android APK Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: aarch64-linux-android
        
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 📱 Setup Android SDK
      run: |
        # Create Android SDK directory
        export ANDROID_HOME="$HOME/android-sdk"
        export ANDROID_SDK_ROOT="$ANDROID_HOME"
        mkdir -p ${ANDROID_HOME}/cmdline-tools
        
        # Download and extract command line tools
        cd ${ANDROID_HOME}/cmdline-tools
        curl -O https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # Set environment variables
        echo "ANDROID_HOME=${ANDROID_HOME}" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=${ANDROID_HOME}" >> $GITHUB_ENV
        echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
        
    - name: 🔧 Install Android components
      run: |
        # Accept licenses
        yes | sdkmanager --licenses >/dev/null 2>&1
        
        # Install required components
        sdkmanager --install \
          "platforms;android-33" \
          "build-tools;33.0.2" \
          "platform-tools" \
          "ndk;25.2.9519653"
          
        # Set NDK environment
        echo "ANDROID_NDK_ROOT=${ANDROID_HOME}/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/25.2.9519653" >> $GITHUB_ENV
        
    - name: 🛠️ Install cargo-apk
      run: |
        cargo install cargo-apk --locked
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cargo-${{ runner.os }}-
          
    - name: 🔍 Verify environment
      run: |
        echo "=== Environment Check ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        echo "cargo-apk installed: $(which cargo-apk)"
        echo "Android SDK components:"
        ls -la $ANDROID_HOME/
        echo "NDK directory:"
        ls -la $ANDROID_HOME/ndk/ 2>/dev/null || echo "NDK not found"
        
    - name: 🔨 Build Debug APK
      run: |
        echo "Building Debug APK..."
        cargo apk build --target aarch64-linux-android
        
    - name: 🚀 Build Release APK  
      run: |
        echo "Building Release APK..."
        cargo apk build --release --target aarch64-linux-android
        
    - name: 📋 List build outputs
      run: |
        echo "=== Build Results ==="
        find target -name "*.apk" -type f -exec ls -lh {} \;
        
        echo "Debug APK directory:"
        ls -la target/debug/apk/ 2>/dev/null || echo "No debug APK found"
        
        echo "Release APK directory:"  
        ls -la target/release/apk/ 2>/dev/null || echo "No release APK found"
        
    - name: 📤 Upload Debug APK
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: chrono-sphere-debug
        path: target/debug/apk/*.apk
        if-no-files-found: warn
        retention-days: 30
        
    - name: 📤 Upload Release APK
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: chrono-sphere-release
        path: target/release/apk/*.apk
        if-no-files-found: warn
        retention-days: 90
        
    - name: ✅ Build Summary
      if: always()
      run: |
        echo "🎮 Chrono-Sphere Build Complete!"
        echo "Check the Artifacts section above to download your APK files."
        echo ""
        if ls target/debug/apk/*.apk 1> /dev/null 2>&1; then
          echo "✅ Debug APK: $(ls -1 target/debug/apk/*.apk | head -1)"
        fi
        if ls target/release/apk/*.apk 1> /dev/null 2>&1; then
          echo "✅ Release APK: $(ls -1 target/release/apk/*.apk | head -1)"
        fi
