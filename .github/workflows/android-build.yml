# .github/workflows/android-build.yml
name: 🤖 Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permet de déclencher manuellement

env:
  CARGO_TERM_COLOR: always

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: 📱 Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false

    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: 🎯 Install Android SDK & Tools
      run: |
        # Installation des outils Android
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # Android SDK
        mkdir -p $HOME/android-sdk/cmdline-tools
        cd $HOME/android-sdk/cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        
        # Variables d'environnement
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

    - name: 🔧 Install Android Components
      run: |
        yes | sdkmanager --licenses
        sdkmanager "platforms;android-33" "build-tools;33.0.2" "platform-tools"

    - name: 🚀 Install Cargo APK
      run: |
        cargo install cargo-apk
        
    - name: 📋 Cache Cargo Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: 🏗️ Build APK Debug
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo apk build --target aarch64-linux-android
        
    - name: 🏗️ Build APK Release
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo apk build --release --target aarch64-linux-android

    - name: 📱 List Generated APKs
      run: |
        find target -name "*.apk" -type f
        ls -la target/debug/apk/
        ls -la target/release/apk/ || true

    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: chrono-sphere-debug-apk
        path: target/debug/apk/*.apk
        if-no-files-found: warn

    - name: 📤 Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: chrono-sphere-release-apk
        path: target/release/apk/*.apk
        if-no-files-found: warn

    - name: 📊 APK Info
      run: |
        if [ -f target/debug/apk/*.apk ]; then
          echo "🎮 APK Debug généré avec succès!"
          ls -lh target/debug/apk/*.apk
        fi
        if [ -f target/release/apk/*.apk ]; then
          echo "🚀 APK Release généré avec succès!"
          ls -lh target/release/apk/*.apk
        fi

  # Job séparé pour tests sur différentes architectures
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, x86_64-linux-android]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🦀 Setup Rust for ${{ matrix.target }}
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    
    - name: 📱 Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false
    
    - name: 🔧 Install cargo-apk
      run: cargo install cargo-apk
    
    - name: ✅ Test Build for ${{ matrix.target }}
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo apk build --target ${{ matrix.target }}
        echo "✅ Build successful for ${{ matrix.target }}"
